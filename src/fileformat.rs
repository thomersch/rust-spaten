// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `fileformat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct Body {
    // message fields
    pub meta: ::protobuf::SingularPtrField<Meta>,
    pub feature: ::protobuf::RepeatedField<Feature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Body {
    fn default() -> &'a Body {
        <Body as ::protobuf::Message>::default_instance()
    }
}

impl Body {
    pub fn new() -> Body {
        ::std::default::Default::default()
    }

    // .Meta meta = 1;


    pub fn get_meta(&self) -> &Meta {
        self.meta.as_ref().unwrap_or_else(|| <Meta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: Meta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut Meta {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> Meta {
        self.meta.take().unwrap_or_else(|| Meta::new())
    }

    // repeated .Feature feature = 2;


    pub fn get_feature(&self) -> &[Feature] {
        &self.feature
    }
    pub fn clear_feature(&mut self) {
        self.feature.clear();
    }

    // Param is passed by value, moved
    pub fn set_feature(&mut self, v: ::protobuf::RepeatedField<Feature>) {
        self.feature = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feature(&mut self) -> &mut ::protobuf::RepeatedField<Feature> {
        &mut self.feature
    }

    // Take field
    pub fn take_feature(&mut self) -> ::protobuf::RepeatedField<Feature> {
        ::std::mem::replace(&mut self.feature, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Body {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.feature {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.feature {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Body {
        Body::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Meta>>(
                "meta",
                |m: &Body| { &m.meta },
                |m: &mut Body| { &mut m.meta },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Feature>>(
                "feature",
                |m: &Body| { &m.feature },
                |m: &mut Body| { &mut m.feature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Body>(
                "Body",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Body {
        static instance: ::protobuf::rt::LazyV2<Body> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Body::new)
    }
}

impl ::protobuf::Clear for Body {
    fn clear(&mut self) {
        self.meta.clear();
        self.feature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Body {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Body {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Meta {
    // message fields
    pub tags: ::protobuf::RepeatedField<Tag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Meta {
    fn default() -> &'a Meta {
        <Meta as ::protobuf::Message>::default_instance()
    }
}

impl Meta {
    pub fn new() -> Meta {
        ::std::default::Default::default()
    }

    // repeated .Tag tags = 1;


    pub fn get_tags(&self) -> &[Tag] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<Tag>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<Tag> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<Tag> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Meta {
    fn is_initialized(&self) -> bool {
        for v in &self.tags {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tags {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Meta {
        Meta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tag>>(
                "tags",
                |m: &Meta| { &m.tags },
                |m: &mut Meta| { &mut m.tags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Meta>(
                "Meta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Meta {
        static instance: ::protobuf::rt::LazyV2<Meta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Meta::new)
    }
}

impl ::protobuf::Clear for Meta {
    fn clear(&mut self) {
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Meta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Meta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Feature {
    // message fields
    pub geomtype: Feature_GeomType,
    pub geomserial: Feature_GeomSerialization,
    pub geom: ::std::vec::Vec<u8>,
    pub left: f64,
    pub right: f64,
    pub top: f64,
    pub bottom: f64,
    pub tags: ::protobuf::RepeatedField<Tag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Feature {
    fn default() -> &'a Feature {
        <Feature as ::protobuf::Message>::default_instance()
    }
}

impl Feature {
    pub fn new() -> Feature {
        ::std::default::Default::default()
    }

    // .Feature.GeomType geomtype = 1;


    pub fn get_geomtype(&self) -> Feature_GeomType {
        self.geomtype
    }
    pub fn clear_geomtype(&mut self) {
        self.geomtype = Feature_GeomType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_geomtype(&mut self, v: Feature_GeomType) {
        self.geomtype = v;
    }

    // .Feature.GeomSerialization geomserial = 2;


    pub fn get_geomserial(&self) -> Feature_GeomSerialization {
        self.geomserial
    }
    pub fn clear_geomserial(&mut self) {
        self.geomserial = Feature_GeomSerialization::WKB;
    }

    // Param is passed by value, moved
    pub fn set_geomserial(&mut self, v: Feature_GeomSerialization) {
        self.geomserial = v;
    }

    // bytes geom = 3;


    pub fn get_geom(&self) -> &[u8] {
        &self.geom
    }
    pub fn clear_geom(&mut self) {
        self.geom.clear();
    }

    // Param is passed by value, moved
    pub fn set_geom(&mut self, v: ::std::vec::Vec<u8>) {
        self.geom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_geom(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.geom
    }

    // Take field
    pub fn take_geom(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.geom, ::std::vec::Vec::new())
    }

    // double left = 4;


    pub fn get_left(&self) -> f64 {
        self.left
    }
    pub fn clear_left(&mut self) {
        self.left = 0.;
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: f64) {
        self.left = v;
    }

    // double right = 5;


    pub fn get_right(&self) -> f64 {
        self.right
    }
    pub fn clear_right(&mut self) {
        self.right = 0.;
    }

    // Param is passed by value, moved
    pub fn set_right(&mut self, v: f64) {
        self.right = v;
    }

    // double top = 6;


    pub fn get_top(&self) -> f64 {
        self.top
    }
    pub fn clear_top(&mut self) {
        self.top = 0.;
    }

    // Param is passed by value, moved
    pub fn set_top(&mut self, v: f64) {
        self.top = v;
    }

    // double bottom = 7;


    pub fn get_bottom(&self) -> f64 {
        self.bottom
    }
    pub fn clear_bottom(&mut self) {
        self.bottom = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bottom(&mut self, v: f64) {
        self.bottom = v;
    }

    // repeated .Tag tags = 8;


    pub fn get_tags(&self) -> &[Tag] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<Tag>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<Tag> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<Tag> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Feature {
    fn is_initialized(&self) -> bool {
        for v in &self.tags {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.geomtype, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.geomserial, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.geom)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.left = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.right = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.top = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.bottom = tmp;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.geomtype != Feature_GeomType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.geomtype);
        }
        if self.geomserial != Feature_GeomSerialization::WKB {
            my_size += ::protobuf::rt::enum_size(2, self.geomserial);
        }
        if !self.geom.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.geom);
        }
        if self.left != 0. {
            my_size += 9;
        }
        if self.right != 0. {
            my_size += 9;
        }
        if self.top != 0. {
            my_size += 9;
        }
        if self.bottom != 0. {
            my_size += 9;
        }
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.geomtype != Feature_GeomType::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.geomtype))?;
        }
        if self.geomserial != Feature_GeomSerialization::WKB {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.geomserial))?;
        }
        if !self.geom.is_empty() {
            os.write_bytes(3, &self.geom)?;
        }
        if self.left != 0. {
            os.write_double(4, self.left)?;
        }
        if self.right != 0. {
            os.write_double(5, self.right)?;
        }
        if self.top != 0. {
            os.write_double(6, self.top)?;
        }
        if self.bottom != 0. {
            os.write_double(7, self.bottom)?;
        }
        for v in &self.tags {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Feature {
        Feature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Feature_GeomType>>(
                "geomtype",
                |m: &Feature| { &m.geomtype },
                |m: &mut Feature| { &mut m.geomtype },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Feature_GeomSerialization>>(
                "geomserial",
                |m: &Feature| { &m.geomserial },
                |m: &mut Feature| { &mut m.geomserial },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "geom",
                |m: &Feature| { &m.geom },
                |m: &mut Feature| { &mut m.geom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "left",
                |m: &Feature| { &m.left },
                |m: &mut Feature| { &mut m.left },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "right",
                |m: &Feature| { &m.right },
                |m: &mut Feature| { &mut m.right },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "top",
                |m: &Feature| { &m.top },
                |m: &mut Feature| { &mut m.top },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "bottom",
                |m: &Feature| { &m.bottom },
                |m: &mut Feature| { &mut m.bottom },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tag>>(
                "tags",
                |m: &Feature| { &m.tags },
                |m: &mut Feature| { &mut m.tags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Feature>(
                "Feature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Feature {
        static instance: ::protobuf::rt::LazyV2<Feature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Feature::new)
    }
}

impl ::protobuf::Clear for Feature {
    fn clear(&mut self) {
        self.geomtype = Feature_GeomType::UNKNOWN;
        self.geomserial = Feature_GeomSerialization::WKB;
        self.geom.clear();
        self.left = 0.;
        self.right = 0.;
        self.top = 0.;
        self.bottom = 0.;
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Feature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Feature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Feature_GeomType {
    UNKNOWN = 0,
    POINT = 1,
    LINE = 2,
    POLYGON = 3,
}

impl ::protobuf::ProtobufEnum for Feature_GeomType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Feature_GeomType> {
        match value {
            0 => ::std::option::Option::Some(Feature_GeomType::UNKNOWN),
            1 => ::std::option::Option::Some(Feature_GeomType::POINT),
            2 => ::std::option::Option::Some(Feature_GeomType::LINE),
            3 => ::std::option::Option::Some(Feature_GeomType::POLYGON),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Feature_GeomType] = &[
            Feature_GeomType::UNKNOWN,
            Feature_GeomType::POINT,
            Feature_GeomType::LINE,
            Feature_GeomType::POLYGON,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Feature_GeomType>("Feature.GeomType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Feature_GeomType {
}

impl ::std::default::Default for Feature_GeomType {
    fn default() -> Self {
        Feature_GeomType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Feature_GeomType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Feature_GeomSerialization {
    WKB = 0,
}

impl ::protobuf::ProtobufEnum for Feature_GeomSerialization {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Feature_GeomSerialization> {
        match value {
            0 => ::std::option::Option::Some(Feature_GeomSerialization::WKB),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Feature_GeomSerialization] = &[
            Feature_GeomSerialization::WKB,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Feature_GeomSerialization>("Feature.GeomSerialization", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Feature_GeomSerialization {
}

impl ::std::default::Default for Feature_GeomSerialization {
    fn default() -> Self {
        Feature_GeomSerialization::WKB
    }
}

impl ::protobuf::reflect::ProtobufValue for Feature_GeomSerialization {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Tag {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    pub field_type: Tag_ValueType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tag {
    fn default() -> &'a Tag {
        <Tag as ::protobuf::Message>::default_instance()
    }
}

impl Tag {
    pub fn new() -> Tag {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // .Tag.ValueType type = 3;


    pub fn get_field_type(&self) -> Tag_ValueType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Tag_ValueType::STRING;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Tag_ValueType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Tag {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if self.field_type != Tag_ValueType::STRING {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if self.field_type != Tag_ValueType::STRING {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tag {
        Tag::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Tag| { &m.key },
                |m: &mut Tag| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Tag| { &m.value },
                |m: &mut Tag| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Tag_ValueType>>(
                "type",
                |m: &Tag| { &m.field_type },
                |m: &mut Tag| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Tag>(
                "Tag",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Tag {
        static instance: ::protobuf::rt::LazyV2<Tag> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Tag::new)
    }
}

impl ::protobuf::Clear for Tag {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.field_type = Tag_ValueType::STRING;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Tag_ValueType {
    STRING = 0,
    INT = 1,
    DOUBLE = 2,
}

impl ::protobuf::ProtobufEnum for Tag_ValueType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Tag_ValueType> {
        match value {
            0 => ::std::option::Option::Some(Tag_ValueType::STRING),
            1 => ::std::option::Option::Some(Tag_ValueType::INT),
            2 => ::std::option::Option::Some(Tag_ValueType::DOUBLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Tag_ValueType] = &[
            Tag_ValueType::STRING,
            Tag_ValueType::INT,
            Tag_ValueType::DOUBLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Tag_ValueType>("Tag.ValueType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Tag_ValueType {
}

impl ::std::default::Default for Tag_ValueType {
    fn default() -> Self {
        Tag_ValueType::STRING
    }
}

impl ::protobuf::reflect::ProtobufValue for Tag_ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10fileformat.proto\"E\n\x04Body\x12\x19\n\x04meta\x18\x01\x20\x01(\
    \x0b2\x05.MetaR\x04meta\x12\"\n\x07feature\x18\x02\x20\x03(\x0b2\x08.Fea\
    tureR\x07feature\"\x20\n\x04Meta\x12\x18\n\x04tags\x18\x01\x20\x03(\x0b2\
    \x04.TagR\x04tags\"\xcf\x02\n\x07Feature\x12-\n\x08geomtype\x18\x01\x20\
    \x01(\x0e2\x11.Feature.GeomTypeR\x08geomtype\x12:\n\ngeomserial\x18\x02\
    \x20\x01(\x0e2\x1a.Feature.GeomSerializationR\ngeomserial\x12\x12\n\x04g\
    eom\x18\x03\x20\x01(\x0cR\x04geom\x12\x12\n\x04left\x18\x04\x20\x01(\x01\
    R\x04left\x12\x14\n\x05right\x18\x05\x20\x01(\x01R\x05right\x12\x10\n\
    \x03top\x18\x06\x20\x01(\x01R\x03top\x12\x16\n\x06bottom\x18\x07\x20\x01\
    (\x01R\x06bottom\x12\x18\n\x04tags\x18\x08\x20\x03(\x0b2\x04.TagR\x04tag\
    s\"9\n\x08GeomType\x12\x0b\n\x07UNKNOWN\x10\0\x12\t\n\x05POINT\x10\x01\
    \x12\x08\n\x04LINE\x10\x02\x12\x0b\n\x07POLYGON\x10\x03\"\x1c\n\x11GeomS\
    erialization\x12\x07\n\x03WKB\x10\0\"\x7f\n\x03Tag\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05valu\
    e\x12\"\n\x04type\x18\x03\x20\x01(\x0e2\x0e.Tag.ValueTypeR\x04type\",\n\
    \tValueType\x12\n\n\x06STRING\x10\0\x12\x07\n\x03INT\x10\x01\x12\n\n\x06\
    DOUBLE\x10\x02J\xfb\n\n\x06\x12\x04\0\0+\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\n\n\x02\x04\0\x12\x04\x02\0\x05\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x02\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x08\x16\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x03\x03\x08\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\
    \r\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x14\x15\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x04\x08%\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x04\x08\
    \x10\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x04\x11\x18\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x04\x19\x20\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x04#$\n\n\n\x02\x04\x01\x12\x04\x07\0\t\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x07\x08\x0c\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x08\x08\x1e\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x08\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\x08\x11\x14\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x08\x15\x19\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x08\x1c\x1d\n\n\n\x02\x04\x02\x12\
    \x04\x0b\0\x20\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0b\x08\x0f\n\x0c\n\x04\
    \x04\x02\x04\0\x12\x04\x0c\x08\x11\t\n\x0c\n\x05\x04\x02\x04\0\x01\x12\
    \x03\x0c\r\x15\n\r\n\x06\x04\x02\x04\0\x02\0\x12\x03\r\x10\x1c\n\x0e\n\
    \x07\x04\x02\x04\0\x02\0\x01\x12\x03\r\x10\x17\n\x0e\n\x07\x04\x02\x04\0\
    \x02\0\x02\x12\x03\r\x1a\x1b\n\r\n\x06\x04\x02\x04\0\x02\x01\x12\x03\x0e\
    \x10\x1a\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x01\x12\x03\x0e\x10\x15\n\x0e\
    \n\x07\x04\x02\x04\0\x02\x01\x02\x12\x03\x0e\x18\x19\n\r\n\x06\x04\x02\
    \x04\0\x02\x02\x12\x03\x0f\x10\x19\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\
    \x12\x03\x0f\x10\x14\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x03\x0f\
    \x17\x18\n\r\n\x06\x04\x02\x04\0\x02\x03\x12\x03\x10\x10\x1c\n\x0e\n\x07\
    \x04\x02\x04\0\x02\x03\x01\x12\x03\x10\x10\x17\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x03\x02\x12\x03\x10\x1a\x1b\n\x0c\n\x04\x04\x02\x04\x01\x12\x04\x12\
    \x08\x14\t\n\x0c\n\x05\x04\x02\x04\x01\x01\x12\x03\x12\r\x1e\n\r\n\x06\
    \x04\x02\x04\x01\x02\0\x12\x03\x13\x10\x18\n\x0e\n\x07\x04\x02\x04\x01\
    \x02\0\x01\x12\x03\x13\x10\x13\n\x0e\n\x07\x04\x02\x04\x01\x02\0\x02\x12\
    \x03\x13\x16\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x08\x1e\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03\x15\x08\x10\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x15\x11\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x15\x1c\x1d\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x16\x08)\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x16\x08\x19\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x16\x1a\
    $\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x16'(\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03\x17\x08\x17\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x17\x08\
    \r\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x17\x0e\x12\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03\x17\x15\x16\n\x1c\n\x04\x04\x02\x02\x03\x12\x03\
    \x1a\x08\x18\x1a\x0f\x20geometry\x20bbox\n\n\x0c\n\x05\x04\x02\x02\x03\
    \x05\x12\x03\x1a\x08\x0e\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x1a\x0f\
    \x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1a\x16\x17\n\x0b\n\x04\x04\
    \x02\x02\x04\x12\x03\x1b\x08\x19\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\
    \x1b\x08\x0e\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x1b\x0f\x14\n\x0c\n\
    \x05\x04\x02\x02\x04\x03\x12\x03\x1b\x17\x18\n\x0b\n\x04\x04\x02\x02\x05\
    \x12\x03\x1c\x08\x17\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\x1c\x08\x0e\
    \n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x1c\x0f\x12\n\x0c\n\x05\x04\x02\
    \x02\x05\x03\x12\x03\x1c\x15\x16\n\x0b\n\x04\x04\x02\x02\x06\x12\x03\x1d\
    \x08\x1a\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03\x1d\x08\x0e\n\x0c\n\x05\
    \x04\x02\x02\x06\x01\x12\x03\x1d\x0f\x15\n\x0c\n\x05\x04\x02\x02\x06\x03\
    \x12\x03\x1d\x18\x19\n\x0b\n\x04\x04\x02\x02\x07\x12\x03\x1f\x08\x1e\n\
    \x0c\n\x05\x04\x02\x02\x07\x04\x12\x03\x1f\x08\x10\n\x0c\n\x05\x04\x02\
    \x02\x07\x06\x12\x03\x1f\x11\x14\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03\
    \x1f\x15\x19\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03\x1f\x1c\x1d\n\n\n\
    \x02\x04\x03\x12\x04\"\0+\x01\n\n\n\x03\x04\x03\x01\x12\x03\"\x08\x0b\n\
    \x0c\n\x04\x04\x03\x04\0\x12\x04#\x08'\t\n\x0c\n\x05\x04\x03\x04\0\x01\
    \x12\x03#\r\x16\n\r\n\x06\x04\x03\x04\0\x02\0\x12\x03$\x10\x1b\n\x0e\n\
    \x07\x04\x03\x04\0\x02\0\x01\x12\x03$\x10\x16\n\x0e\n\x07\x04\x03\x04\0\
    \x02\0\x02\x12\x03$\x19\x1a\n\r\n\x06\x04\x03\x04\0\x02\x01\x12\x03%\x10\
    \x18\n\x0e\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x03%\x10\x13\n\x0e\n\x07\
    \x04\x03\x04\0\x02\x01\x02\x12\x03%\x16\x17\n\r\n\x06\x04\x03\x04\0\x02\
    \x02\x12\x03&\x10\x1b\n\x0e\n\x07\x04\x03\x04\0\x02\x02\x01\x12\x03&\x10\
    \x16\n\x0e\n\x07\x04\x03\x04\0\x02\x02\x02\x12\x03&\x19\x1a\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03(\x08\x17\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03(\
    \x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\x0f\x12\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03(\x15\x16\n\x0b\n\x04\x04\x03\x02\x01\x12\x03)\x08\
    \x18\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03)\x08\r\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03)\x0e\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03)\
    \x16\x17\n\x0b\n\x04\x04\x03\x02\x02\x12\x03*\x08\x1b\n\x0c\n\x05\x04\
    \x03\x02\x02\x06\x12\x03*\x08\x11\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x03*\x12\x16\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03*\x19\x1ab\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
